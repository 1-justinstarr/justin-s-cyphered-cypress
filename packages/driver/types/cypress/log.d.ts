// The type declarations for Cypress Logs & the corresponding configuration permutations
declare namespace Cypress {
  type Log = InternalLog
  type InternalLogConfig = AgentLogConfig | CommandLogConfig | RouteLogConfig  
  type LogAttributes = AgentLogAttributes | CommandLogAttributes | RouteLogAttributes  

  interface Cypress {
    log(options: Partial<Cypress.LogConfig | PrivateLogConfig>): Log | InternalLog | undefined
  }

  interface InternalLog extends Cypress.Log {
    groupEnd(): void
  }

  interface GenericLogConfig {
    // defaults to command
    instrument?: 'agent' | 'command' | 'route'
    // name of the log
    name?: string
    // the name override for display purposes only
    displayName?: string
    // additional information to include in the log if not overridden
    // the render props message
    // defaults to command arguments for command instrument
    message?: string | Array<string>
    // whether or not to show the log in the Reporter UI or only
    // store the log details on the command and log manager
    emitOnly?: boolean
    end?: boolean
    // whether or not the generated log was an event or command
    event?: boolean
    // whether or not to start a new log group
    groupStart?: boolean
    // whether or not to end the current group
    groupEnd?: boolean
    autoEnd?: boolean
    // the state of the log
    state?: 'failed' | 'passed' | 'pending'
    // the type of log
    //   system - log generated by Cypress
    //   parent - log generated by Command
    //   child  - log generated by Chained Command
    type?: 'system' | 'parent' | 'child' | ((current: Cypress.State.current, subject: Cypress.State.subject) => 'parent' | 'child')
  
    alias?: string | Array<string>
    aliasType?: 'agent' | 'route' | 'primitive' | 'dom' | undefined
    // DEPRECATED: use consoleProps
    onConsole?: () => Cypress.ObjectLike
    // provide the content to display in the browser's console when a log is 
    // clicked from the Cypress Command Log
    consoleProps?: () => Cypress.ObjectLike
    // timeout of the log - defaults to defaultCommandTimeout
    timeout?: number
  }

  interface RouteLogConfig extends GenericLogConfig {
    instrument: 'route'
    aliasType: 'route'
    type: 'system'
    // the number of xhr responses that occurred. This is only applicable to
    // logs defined with instrument=route
    numResponses?: number
    // whether or not the xhr route had a corresponding response stubbed out
    isStubbed?: boolean
    // the url of the xhr route
    url?: string
  }
  
  interface AgentLogConfig extends GenericLogConfig {
    instrument: 'agent'
    aliasType: 'agent'
    type: 'system'
    // the id associated with the registered agent type
    count?: number
    // the number of types the agent has been called
    callCount?: number
    // the name of the method on the object to be wrapped
    functionName?: string
  }
  
  interface CommandLogConfig extends GenericLogConfig {
    // the JQuery element for the command. This will highlight the command
    // in the main window when debugging
    $el?: JQuery
    //
    instrument?: 'command'
  
    browserPreRequest?: any
    commandName?: string
    


    method?: string
  
    response?: string | object
    renderProps?: () => {
      indicator?: 'aborted' | 'pending' | 'successful' | 'bad'
      interceptions?: Array<Cypress.ObjectLike>
      message?: string
      status?: string
      wentToOrigin?: boolean
    }
    // weather or not the log details should trigger the session:add event
    sessionInfo?: boolean
    status?: number
    url?: string
  }

  interface GenericLogAttributes {
    // id of the log - generated by LogManager
    id: number
    // id of the mocha hook the log is associated with - Mocha
    hookId: string
    // id of the mocha test the log is associated with - Mocha
    testId?: string
    // whether or not the log has completed
    ended?: boolean
    // the error associated to the log instrument
    error?: any
    // the id of the current group the log is associated with - provided by Log
    group?: number
    // the current group level  - provided by Log
    groupLevel?: number
    // whether or not a snapshots should be captured when the log is created.
    // this will generate a snapshot d when autoEnd is set as well.
    // when true and $el is set, a snapshot will only be captured in open mode or when
    // numTestsKeptInMemory is > 0.
    snapshot?: boolean
    // the collection of snapshots captured during the instrument's execution
    snapshot?: Array<any>
    // the JQuery element for the command. This will highlight the command
    // in the main window when debugging
    $el?: JQuery
    // when $el is provided, provided by Log
    highlightAttr?: string
    // when $el is provided, provided by Log
    numElements?: number
    // when $el is provided, provided by Log
    visible?: boolean
    // the mocha test retry count
    testCurrentRetry: number
    // the current url under test
    url: string
    // the viewport height of the AUT
    viewportHeight: number
    // the viewport width of the AUT
    viewportWidth: number
    wallClockStartedAt: string
  }
  
  type AgentLogAttributes = GenericLogAttributes & AgentLogConfig
  type CommandLogAttributes = GenericLogAttributes & CommandLogConfig
  type RouteLogAttributes = GenericLogAttributes & RouteLogConfig
}

